r2 <- random_ranking(7, 10)
r3 <- random_ranking(7, 10)
r1
r2
r3
random_ranking <- function(elements, size, names = TRUE) {
dif <- size - elements
stopifnot(dif >= 0)
r <- c(sample(1:elements, elements), sample(1:elements, dif, replace = TRUE))
r <- matrix(r, nrow = 1, byrow = TRUE)
colnames(r) <- LETTERS[1:size]
r <- profile_of_rankings(r)
return(r)
}
set.seed(123)
r1 <- random_ranking(7, 10)
r2 <- random_ranking(7, 10)
r3 <- random_ranking(7, 10)
r1
two(r1, verbose = TRUE)
r1
two(r1, verbose = TRUE)
three(r1, verbose = TRUE)
five(r1, verbose = TRUE)
seven(r1, verbose = TRUE)
two(r1, verbose = TRUE)
two(r1, verbose = TRUE)
three(r1, verbose = TRUE)
five(r1, verbose = TRUE)
seven(r1, verbose = TRUE)
two(r1, verbose = TRUE)
ones <- 2
r <- r1
r1
r2
r3
for(i in 1:ones) {
print(i)
if(sum((r < i) >= ones) {
print(i)
}
}
r <- r1
for(i in 1:ones) {
if(sum((r < i) >= ones)) {
print(i)
}
}
r1
r1 < 1
r <- r1
for(i in 1:ones) {
if(sum((r <= i) >= ones)) {
print(i)
}
}
r1 < 1
r1 <= 1
r1[,1]
r1
set.seed(123)
r1[,-1] <- random_ranking(7, 10)
r1
r1 <- random_ranking(7, 10)
r1
r1
r1[,-1]
source('~/Desktop/Github/consensus/consensus/R/scoring_ranking_rule.R')
random_ranking <- function(elements, size, names = TRUE) {
dif <- size - elements
stopifnot(dif >= 0)
r <- c(sample(1:elements, elements), sample(1:elements, dif, replace = TRUE))
r <- matrix(r, nrow = 1, byrow = TRUE)
colnames(r) <- LETTERS[1:size]
r <- profile_of_rankings(r)
return(r)
}
set.seed(123)
r1 <- random_ranking(7, 10)
r1
two(r1)
library(consensus)
two(r1)
remove.packages("consensus")
library(consensus)
plurality(r1)
library(consensus)
random_ranking <- function(elements, size, names = TRUE) {
dif <- size - elements
stopifnot(dif >= 0)
r <- c(sample(1:elements, elements), sample(1:elements, dif, replace = TRUE))
r <- matrix(r, nrow = 1, byrow = TRUE)
colnames(r) <- LETTERS[1:size]
r <- profile_of_rankings(r)
return(r)
}
set.seed(123)
r1 <- random_ranking(7, 10)
r1
two(r1)
library(consensus)
profile_of_rankings(matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE))
matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE)
e1 <- matrix(c(a = 1, b = 1, c = 2, d = 2), nrow = 1, byrow = TRUE)
e1
c(a = 1, b = 1, c = 2, d = 2)
e1 <- matrix(c(a = 1, b = 1, c = 2, d = 2), nrow = 1, byrow = TRUE)
e1
e1 <- matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE)
colnames(e1) <- letters[1:4]
e1 <- profile_of_rankings(e1)
e1
library(consensus)
plurality(e1, seePoints = T)
library(consensus)
plurality(e1, seePoints = T)
library(consensus)
plurality(e1, seePoints = T)
library(consensus)
plurality(e1, seePoints = T)
two(e1)
library(consensus)
two(e1)
library(consensus)
two(e1)
two(e1, seePoints = TRUE)
three(e1, seePoints = TRUE)
library(consensus)
three(e1, seePoints = TRUE)
five(e1, seePoints = TRUE)
source('~/Desktop/Github/consensus/consensus/R/scoring_ranking_rule.R')
rm(list = ls())
e1 <- matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE)
colnames(e1) <- letters[1:4]
e1 <- profile_of_rankings(e1)
plurality(e1, seePoints = TRUE)
plurality(e2, seePoints = TRUE)
e2 <- matrix(c(1, 1, 2, 2, 2), nrow = 1, byrow = TRUE)
colnames(e2) <- letters[1:5]
e2 <- profile_of_rankings(e2)
plurality(e2, seePoints = TRUE)
plurality(e1, seePoints = TRUE)
plurality(e1, seePoints = TRUE)
plurality(e3, seePoints = TRUE)
e3 <- matrix(c(1, 1, 1, 1, 2), nrow = 1, byrow = TRUE)
colnames(e3) <- letters[1:5]
e3 <- profile_of_rankings(e3)
plurality(e3, seePoints = TRUE)
e4 <- matrix(c(1, 2, 3, 3, 4, 5), nrow = 1, byrow = TRUE)
colnames(e4) <- letters[1:6]
e4 <- profile_of_rankings(e4)
plurality(e1, seePoints = TRUE)
plurality(e4, seePoints = TRUE)
e1 <- matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE)
colnames(e1) <- letters[1:4]
e1 <- profile_of_rankings(e1)
e1
plurality(e1, seePoints = TRUE)
two(e1, seePoints = TRUE)
three(e1, seePoints = TRUE)
five(e1, seePoints = TRUE)
library(consensus)
five(e1, seePoints = TRUE)
library(consensus)
seven(e1, seePoints = TRUE)
e2 <- matrix(c(1, 1, 2, 2, 2), nrow = 1, byrow = TRUE)
colnames(e2) <- letters[1:5]
e2 <- profile_of_rankings(e2)
plurality(e2, seePoints = TRUE)
two(e2, seePoints = TRUE)
three(e2, seePoints = TRUE)
five(e2, seePoints = TRUE)
seven(e2, seePoints = TRUE)
e3 <- matrix(c(1, 1, 1, 1, 2), nrow = 1, byrow = TRUE)
colnames(e3) <- letters[1:5]
e3 <- profile_of_rankings(e3)
e3 <- matrix(c(1, 1, 1, 1, 2), nrow = 1, byrow = TRUE)
colnames(e3) <- letters[1:5]
e3 <- profile_of_rankings(e3)
e3
plurality(e3, seePoints = TRUE)
two(e3, seePoints = TRUE)
three(e3, seePoints = TRUE)
five(e3, seePoints = TRUE)
seven(e3, seePoints = TRUE)
e4 <- matrix(c(1, 2, 3, 3, 4, 5), nrow = 1, byrow = TRUE)
colnames(e4) <- letters[1:6]
e4 <- profile_of_rankings(e4)
e4
plurality(e4, seePoints = TRUE)
two(e4, seePoints = TRUE)
three(e4, seePoints = TRUE)
five(e4, seePoints = TRUE)
seven(e4, seePoints = TRUE)
e5 <- matrix(c(1, 2, 3, 3, 3, 4), nrow = 1, byrow = TRUE)
colnames(e5) <- letters[1:6]
e5 <- profile_of_rankings(e5)
e5
plurality(e5, seePoints = TRUE)
two(e5, seePoints = TRUE)
three(e5, seePoints = TRUE)
five(e5, seePoints = TRUE)
seven(e5, seePoints = TRUE)
e6 <- matrix(c(1, 2, 3, 3, 3, 3), nrow = 1, byrow = TRUE)
colnames(e6) <- letters[1:6]
e6 <- profile_of_rankings(e6)
plurality(e6, seePoints = TRUE)
two(e6, seePoints = TRUE)
e6
plurality(e6, seePoints = TRUE)
two(e6, seePoints = TRUE)
three(e6, seePoints = TRUE)
five(e6, seePoints = TRUE)
seven(e6, seePoints = TRUE)
e7 <- matrix(c(1, 1, 1, 2, 2, 3, 4, 5), nrow = 1, byrow = TRUE)
colnames(e7) <- letters[1:8]
e7 <- profile_of_rankings(e7)
plurality(e7, seePoints = TRUE)
two(e7, seePoints = TRUE)
e7
plurality(e7, seePoints = TRUE)
two(e7, seePoints = TRUE)
three(e7, seePoints = TRUE)
five(e7, seePoints = TRUE)
seven(e7, seePoints = TRUE)
e8 <- matrix(c(1, 2, 2, 2, 2, 3), nrow = 1, byrow = TRUE)
colnames(e8) <- letters[1:6]
e8
plurality(e8, seePoints = TRUE)
e8 <- matrix(c(1, 2, 2, 2, 2, 3), nrow = 1, byrow = TRUE)
colnames(e8) <- letters[1:6]
e8 <- profile_of_rankings(e8)
e8
plurality(e8, seePoints = TRUE)
two(e8, seePoints = TRUE)
three(e8, seePoints = TRUE)
five(e8, seePoints = TRUE)
seven(e8, seePoints = TRUE)
source('~/.active-rstudio-document')
sink("tapproval_examples")
e1
plurality(e1, seePoints = TRUE)
two(e1, seePoints = TRUE)
three(e1, seePoints = TRUE)
five(e1, seePoints = TRUE)
seven(e1, seePoints = TRUE)
e2
plurality(e2, seePoints = TRUE)
two(e2, seePoints = TRUE)
three(e2, seePoints = TRUE)
five(e2, seePoints = TRUE)
seven(e2, seePoints = TRUE)
e3
plurality(e3, seePoints = TRUE)
two(e3, seePoints = TRUE)
three(e3, seePoints = TRUE)
five(e3, seePoints = TRUE)
seven(e3, seePoints = TRUE)
e4
plurality(e4, seePoints = TRUE)
two(e4, seePoints = TRUE)
three(e4, seePoints = TRUE)
five(e4, seePoints = TRUE)
seven(e4, seePoints = TRUE)
e5
plurality(e5, seePoints = TRUE)
two(e5, seePoints = TRUE)
three(e5, seePoints = TRUE)
five(e5, seePoints = TRUE)
seven(e5, seePoints = TRUE)
e6
plurality(e6, seePoints = TRUE)
two(e6, seePoints = TRUE)
three(e6, seePoints = TRUE)
five(e6, seePoints = TRUE)
seven(e6, seePoints = TRUE)
e7
plurality(e7, seePoints = TRUE)
two(e7, seePoints = TRUE)
three(e7, seePoints = TRUE)
five(e7, seePoints = TRUE)
seven(e7, seePoints = TRUE)
e8
plurality(e8, seePoints = TRUE)
two(e8, seePoints = TRUE)
three(e8, seePoints = TRUE)
five(e8, seePoints = TRUE)
seven(e8, seePoints = TRUE)
sink()
2+2
library(consensus)
source('~/Desktop/Github/consensus/consensus/R/scoring_ranking_rule.R')
remove.packages("consensus")
library(consensus)
random_ranking <- function(elements, size, names = TRUE) {
dif <- size - elements
stopifnot(dif >= 0)
r <- c(sample(1:elements, elements), sample(1:elements, dif, replace = TRUE))
r <- matrix(r, nrow = 1, byrow = TRUE)
colnames(r) <- LETTERS[1:size]
r <- profile_of_rankings(r)
return(r)
}
sink("tapproval_examples")
e1 <- matrix(c(1, 1, 2, 2), nrow = 1, byrow = TRUE)
colnames(e1) <- letters[1:4]
e1 <- profile_of_rankings(e1)
e1
plurality(e1, seePoints = TRUE)
two(e1, seePoints = TRUE)
three(e1, seePoints = TRUE)
five(e1, seePoints = TRUE)
seven(e1, seePoints = TRUE)
e2 <- matrix(c(1, 1, 2, 2, 2), nrow = 1, byrow = TRUE)
colnames(e2) <- letters[1:5]
e2 <- profile_of_rankings(e2)
e2
plurality(e2, seePoints = TRUE)
two(e2, seePoints = TRUE)
three(e2, seePoints = TRUE)
five(e2, seePoints = TRUE)
seven(e2, seePoints = TRUE)
library(consensus)
random_ranking <- function(elements, size, names = TRUE) {
dif <- size - elements
stopifnot(dif >= 0)
r <- c(sample(1:elements, elements), sample(1:elements, dif, replace = TRUE))
r <- matrix(r, nrow = 1, byrow = TRUE)
colnames(r) <- LETTERS[1:size]
r <- profile_of_rankings(r)
return(r)
}
plurality(e1, seePoints = TRUE)
rm(list = ls())
library(consensus)
source('~/Desktop/Github/consensus/consensus/R/prueba_tapprovals.R')
sink("tapproval_examples")
e1
plurality(e1, seePoints = TRUE)
two(e1, seePoints = TRUE)
three(e1, seePoints = TRUE)
five(e1, seePoints = TRUE)
seven(e1, seePoints = TRUE)
e2
plurality(e2, seePoints = TRUE)
two(e2, seePoints = TRUE)
three(e2, seePoints = TRUE)
five(e2, seePoints = TRUE)
seven(e2, seePoints = TRUE)
e3
plurality(e3, seePoints = TRUE)
two(e3, seePoints = TRUE)
three(e3, seePoints = TRUE)
five(e3, seePoints = TRUE)
seven(e3, seePoints = TRUE)
e4
plurality(e4, seePoints = TRUE)
two(e4, seePoints = TRUE)
three(e4, seePoints = TRUE)
five(e4, seePoints = TRUE)
seven(e4, seePoints = TRUE)
e5
plurality(e5, seePoints = TRUE)
two(e5, seePoints = TRUE)
three(e5, seePoints = TRUE)
five(e5, seePoints = TRUE)
seven(e5, seePoints = TRUE)
e6
plurality(e6, seePoints = TRUE)
two(e6, seePoints = TRUE)
three(e6, seePoints = TRUE)
five(e6, seePoints = TRUE)
seven(e6, seePoints = TRUE)
e7
plurality(e7, seePoints = TRUE)
two(e7, seePoints = TRUE)
three(e7, seePoints = TRUE)
five(e7, seePoints = TRUE)
seven(e7, seePoints = TRUE)
e8
plurality(e8, seePoints = TRUE)
two(e8, seePoints = TRUE)
three(e8, seePoints = TRUE)
five(e8, seePoints = TRUE)
seven(e8, seePoints = TRUE)
sink()
library(consensus)
manhattan <- "A ~ D ~ E > G > C > B ~ H > F"
euclidean <- "E > C ~ G > A ~ D > B > F ~ H"
chebyshev <- "C ~ E > B > F > G > A ~ D ~ H"
parse_ranking(manhattan)
library(tidyverse)
parse_ranking(manhattan)
as.numeric(parse_ranking(manhattan))
matrix(mamanhattan, euclidean, chebyshev)
matrix(manhattan, euclidean, chebyshev)
cbing(manhattan, euclidean, chebyshev)
cbind(manhattan, euclidean, chebyshev)
rbind(manhattan, euclidean, chebyshev)
rbind(as.numeric(manhattan), euclidean, chebyshev)
manhattan <- parse_ranking("A ~ D ~ E > G > C > B ~ H > F")
euclidean <- parse_ranking("E > C ~ G > A ~ D > B > F ~ H")
chebyshev <- parse_ranking("C ~ E > B > F > G > A ~ D ~ H")
rbind(manhattan, euclidean, chebyshev)
profile_of_rankings(rbind(manhattan, euclidean, chebyshev))
por <- profile_of_rankings(rbind(manhattan, euclidean, chebyshev))
plurality(por)
xtable(plurality(por))
library(xtable)
xtable(plurality(por))
plurality(por)
plurality(por, seePoints = TRUE)
library(consensus)
plurality(por, seePoints = TRUE)
1.83^2
2/3
4/3
5/4
6/4
7/3
7/4
8/3
install.packages("fractional")
library(fractional)
fractional(plurality(por, seePoints = TRUE))
plurality(por, seePoints = TRUE)
c(0.3333333,0.0000000,0.5000000,0.3333333,1.8333333,0.0000000,0.0000000,0.0000000)
fractional(c(0.3333333,0.0000000,0.5000000,0.3333333,1.8333333,0.0000000,0.0000000,0.0000000))
two(por, seePoints = TRUE)
three(por, seePoints = TRUE)
four(por, seePoints = TRUE)
five(por, seePoints = TRUE)
scoring <- function(profileOfRankings, method = NULL, t = 1, verbose = FALSE, seePoints = FALSE) {
if(verbose) {
cat('Executing a scoring ranking rule...\n')
}
attname <- deparse(substitute(profileOfRankings))
# Split votes and rankings
splittedPOF <- split_profile_of_rankings(profileOfRankings)
# Get votes
votes <- splittedPOF$votes
# Get rankings
profileOfRankings <- splittedPOF$rankings
# Get the candidates
candidates <- splittedPOF$candidates
# Result vectors
v <- vector(length = ncol(profileOfRankings))
names(v) <- names(profileOfRankings)
# For each ranking in the profile of rankings
for(i in 1:nrow(profileOfRankings)) {
numVotersRow <- votes[i]
ranking <- profileOfRankings[i,]
p <- calculatePoints(ranking, method, t, verbose, seePoints)
v <- v + (numVotersRow * p)
if(verbose) {
cat("-> The points for this ranking\n")
print(p)
cat("-> This ranking has ",numVotersRow," voters\n")
cat("-> The current value of the total points is:")
print(v)
}
}
if(seePoints) {
print(v)
}
v <- sort(v, decreasing = TRUE) # sort v from more votes to less
if(verbose) {
print(paste('Points rewarded by each candidate of the profile of rankings', "'", attname, "'"))
print(v)
print('Ranking:')
}
# vector that will store the final ranking
ranking <- rep(0, length(candidates))
names(ranking) <- candidates
pos <- 1 # position in the ranking
for(i in 1:(length(v)-1)) {
thisElem <- v[i]
nextElem <- v[i+1]
# ranking
index_of_candidate <- which(candidates == names(v)[i])
ranking[index_of_candidate] <- pos
if(thisElem > nextElem) {
pos <- pos + 1
}
# else, nothing -> this means the two rankings are equals
# so it's not necessary increment the position cause it will be tied
# with the previous element
}
ranking[which(candidates == names(v)[i+1])] <- pos
return(ranking(ranking))
}
scoring(por, t = 2)
scoring(por, t = 2)
library(consensus)
docu
library(devtools)
document()
library(consensus)
document()
scoring(por, t = 2)
scoring(por, method = NULL, t = 2)
scoring(profileOfRankings, "t", t = 2, seePoints = T)
scoring(por, "t", t = 2, seePoints = T)
two(por, seePoints = TRUE)
scoring(por, "t", t = 4, seePoints = T)
scoring(por, "t", t = 2, seePoints = T)
borda_count(por)
scoring(por, "t", t = 6, seePoints = T)
library(devtools)
document(.)
document()
build()
