rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
print(rankings)
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-2)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
rankings[which.min(rankings)] <- 1
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
m
m == 5
(m == 5) * (1:4)
(m == 7) * (1:4)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
nvoters <- sum(profileOfRankings$numberOfVoters)
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums((rankings == 1 * nvoters))
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
nvoters <- sum(profileOfRankings$numberOfVoters)
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums((rankings == 1) * nvoters)
print(rankings == 1)
print((rankings == 1) * nvoters)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
irv(por02)
por02
por03
irv(por03)
irv(por04)
library(consensus)
ppor08
por08
rm(list=ls())
library(consensus)
por08
por09
por10
por11
por12
por13
library(devtools)
use_data_raw("por13")
library(consensus)
por13
irv(por13)
document()
library(consensus)
irv(por13)
library(consensus)
por13
source('~/Desktop/Github/consensus/data-raw/por13.R', echo=TRUE)
library(tibble)
library(tidyverse)
librery(tidymodels)
library(tidymodels)
por13
source('~/Desktop/Github/consensus/data-raw/por13.R', echo=TRUE)
rm(por13)
por13
library(consensus)
por13
irv(por13)
toLatex(por13)
library(consensus)
library(consensus)
toLatex(por13)
source('~/Desktop/Github/consensus/data-raw/por13.R', echo=TRUE)
library(tibble)
library(tidyverse)
library(tidymodels)
por13
rm(list=ls())
library(consensus)
scorix(por01)
library(consensus)
por07
votrix(por07)
por04
por03
por02
por05
por06
por07
votrix(por07)
votrix(por04)
votrix(por01)
votrix(por01)
por01
ppor01
por07
votrix(por07)
por08
por09
votrix(por08)
por07
library(consensus)
por06
por07
por08
por09
votrix(por09)
tideman(por09)
tideman(por09, break_ties = "max")
tideman(por09)
tideman(por09)
tideman(por09)
tideman(por09, break_ties = "c ≻ b ≻ d ≻ a")
tideman(por09, break_ties = ranking(c("c ≻ b ≻ d ≻ a")))
por09
tideman(por09, break_ties = parse_ranking(c("c ≻ b ≻ d ≻ a")))
votrix(por01)
tideman(por01)
por01
votrix(por01)
v <- votrix(por01)
v <- votrix(por01)
ifelse(v > 7, TRUE, FALSE)
v <- votrix(por01)
ifelse(v >= 7, TRUE, FALSE)
rowSums(ifelse(v >= 7, TRUE, FALSE))
v <- votrix(por01)
rowSums(ifelse(v > 7, TRUE, FALSE))
votrix(por02)
votrix(por03)
votrix(por04)
votrix(por05)
votrix(por05)
votrix(por06)
votrix(por07)
votrix(por08)
por08
votrix(por08)
v <- votrix(por01)
(m <- ifelse(v >= 5, TRUE, FALSE))
for(i in 1:m) {
for(j in i:m) {
}
}
library(devtools)
use_c("condorcet")
library(consensus)
por01
votrix(por01)
copeland(por01)
library(consensus)
por01
votrix(por01)
copeland(por01)
copeland(por01, seePoints = TRUE)
por02
votrix(por02)
copeland(por02)
(por02)
(votrix(por02))
copeland(por02)
(por02)
(votrix(por02))
(por03)
(votrix(por03))
copeland(por03, seePoints = TRUE)
(por04)
(votrix(por04))
copeland(por04, seePoints = TRUE)
(por05)
(votrix(por05))
copeland(por05, seePoints = TRUE)
library(consensus)
(por06)
(votrix(por06))
copeland(por06, seePoints = TRUE)
(por07)
(votrix(por07))
copeland(por07, seePoints = TRUE)
(por08)
(votrix(por08))
copeland(por08, seePoints = TRUE)
(por09)
(votrix(por09))
copeland(por09, seePoints = TRUE)
(por10)
(votrix(por10))
copeland(por10, seePoints = TRUE)
(por11)
(votrix(por11))
copeland(por11, seePoints = TRUE)
(por12)
(votrix(por12))
copeland(por12, seePoints = TRUE)
por13
(por14)
por01
votrix(por01)
library(consensus)
library(consensus)
(por01)
(votrix(por01))
copeland(por01, seePoints = TRUE)
library(consensus)
(por13)
(votrix(por13))
copeland(por13, seeTrace = TRUE, seePoints = TRUE)
(por01)
(votrix(por01))
copeland(por01, seeTrace = TRUE, seePoints = TRUE)
library(consensus)
library(devtools)
use_data_raw()
use_data_raw("por14")
use_data_raw("por15")
random_profile_of_rankings(10, 10)
use_package("tibble")
use_pipe()
library(consensus)
