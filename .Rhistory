pos <- ncandidates
for(i in 1:ncandidates-1) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
if(i > ncandidates-1) {
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
}
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-1) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
if(i > ncandidates-1) {
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-1) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
if(i < ncandidates-1) {
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-1) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < ncandidates-1) {
rankings <- t(apply(rankings, 1, rerank))
print(rankings)
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-1) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < ncandidates-2) {
rankings <- t(apply(rankings, 1, rerank))
print(rankings)
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
print(rankings)
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:ncandidates-2) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-2)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
rankings <- t(apply(rankings, 1, rerank))
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
rankings[which.min(rankings)] <- 1
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
half_nvoters <- sum(profileOfRankings$numberOfVoters) / 2
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums(rankings == 1)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
m
m == 5
(m == 5) * (1:4)
(m == 7) * (1:4)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
nvoters <- sum(profileOfRankings$numberOfVoters)
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums((rankings == 1 * nvoters))
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
#' Instant runoff voting
#'
#' @param profileOfRankings
#'
#' @return
#' @export
#'
#' @examples
irv <- function(profileOfRankings, break_ties = "random") {
rankings <- profileOfRankings$profileOfRankings
candidates <- profileOfRankings$candidates
ncandidates <- length(candidates)
results <- rep(0, length(candidates))
names(results) <- candidates
nvoters <- sum(profileOfRankings$numberOfVoters)
pos <- ncandidates
for(i in 1:(ncandidates-1)) {
print(rankings)
# Count the times that the candidate has been ranked at the first position
times_first <- colSums((rankings == 1) * nvoters)
print(rankings == 1)
print((rankings == 1) * nvoters)
# The worse candidate (the one that has been ranked in the best position the min number of times)
worse <- which.min(times_first)
results[worse] <- pos
print(results)
pos <- pos - 1
rankings <- rankings[,-worse]
if(i < (ncandidates-1)) {
rankings <- t(apply(rankings, 1, rerank))
} else {
results[which.min(results)] <- 1
}
}
return(results)
}
irv(por01)
irv(por02)
por02
por03
irv(por03)
irv(por04)
library(consensus)
ppor08
por08
rm(list=ls())
library(consensus)
por08
por09
por10
por11
por12
por13
library(devtools)
use_data_raw("por13")
library(consensus)
por13
irv(por13)
document()
library(consensus)
irv(por13)
library(consensus)
por13
source('~/Desktop/Github/consensus/data-raw/por13.R', echo=TRUE)
library(tibble)
library(tidyverse)
librery(tidymodels)
library(tidymodels)
por13
source('~/Desktop/Github/consensus/data-raw/por13.R', echo=TRUE)
rm(por13)
por13
library(consensus)
por13
irv(por13)
toLatex(por13)
