votrix(por01)
por01
ppor01
por07
votrix(por07)
por08
por09
votrix(por08)
por07
library(consensus)
por06
por07
por08
por09
votrix(por09)
tideman(por09)
tideman(por09, break_ties = "max")
tideman(por09)
tideman(por09)
tideman(por09)
tideman(por09, break_ties = "c ≻ b ≻ d ≻ a")
tideman(por09, break_ties = ranking(c("c ≻ b ≻ d ≻ a")))
por09
tideman(por09, break_ties = parse_ranking(c("c ≻ b ≻ d ≻ a")))
votrix(por01)
tideman(por01)
por01
votrix(por01)
v <- votrix(por01)
v <- votrix(por01)
ifelse(v > 7, TRUE, FALSE)
v <- votrix(por01)
ifelse(v >= 7, TRUE, FALSE)
rowSums(ifelse(v >= 7, TRUE, FALSE))
v <- votrix(por01)
rowSums(ifelse(v > 7, TRUE, FALSE))
votrix(por02)
votrix(por03)
votrix(por04)
votrix(por05)
votrix(por05)
votrix(por06)
votrix(por07)
votrix(por08)
por08
votrix(por08)
v <- votrix(por01)
(m <- ifelse(v >= 5, TRUE, FALSE))
for(i in 1:m) {
for(j in i:m) {
}
}
library(devtools)
use_c("condorcet")
pw <- votrix(por04)
ranking <- rep(0, 4)
names(ranking) <- colnames(pw)
to_explore_pos <- 0
candidates_to_explore <- 0
pw <- votrix(por04)
library(usethis)
use_build_ignore("mork_exact.R")
document()
library(devtools)
document()
use_build_ignore("R/mork_exact.R")
document()
use_build_ignore("R/mork_exact.R")
document()
document()
pw <- votrix(por04)
ranking <- rep(0, 4)
names(ranking) <- colnames(pw)
to_explore_pos <- 0
candidates_to_explore <- 0
mork_exact <- function(pw, ranking, level = 1) {
pre <- paste(rep("-", level), collapse = "")
cat(paste0(pre, " executing mork_exact in level ", level, "\n"))
print(ranking)
# Stop condition 1: the matrix has dimensions 2x2
if(ncol(pw) == level) {
# Return the candidate
ranking[which(ranking==0)] <- ncol(pw)
print(ranking)
return(FALSE)
}
# Elements to add to the queue to evaluate
rows <- rowSums(pw)
cols <- colSums(pw)
to_explore_indexes <- length(which((rows != 0) & (rows >= cols)))
to_explore_indexes <- sort((rows-cols)[1:to_explore_indexes], decreasing = TRUE, index.return=TRUE)$ix
print(tibble::tibble(candidate = names(ranking),
row = rows,
col = cols,
difference = rows-cols) %>% dplyr::arrange(desc(difference)))
print(to_explore_indexes)
# If there is any index left to explore
while(length(to_explore_indexes) >= 1) {
next_index <- to_explore_indexes[1]
# Add the index to the ranking
new_ranking <- ranking
new_ranking[next_index] <- level
# Remove the index from the matrix
new_pw <- pw
new_pw[next_index,] <- 0
new_pw[,next_index] <- 0
# Call recursively
mork_exact(new_pw, new_ranking, level+1)
# Remove the index from the list of indexes to explore
to_explore_indexes <- to_explore_indexes[-1]
cat(paste(pre, "candidates to explore:\n"))
print(to_explore_indexes)
}
cat(paste(pre, "no more candidates to explore in this level\n"))
}
mork_exact(pw, ranking)
mork_exact(pw, ranking)
document()
library(devtools)
document()
library(consensus)
rm(list=ls())
document()
document()
borda_count(por01)
v <- borda_count(por01)
v
class(v)
borda_count(por01, seeTrace = TRUE)
beatpath(por01)
por01
votrix(por02)
por02
votrix(por05)
scorix(por05)
por01
irv(por01)
library(consensus)
irv(por01)
document()
library(consensus)
irv(por01)
library(consensus)
irv(por01)
library(consensus)
irv(por01)
library(consensus)
library(devtools)
use_r("distances")
library(consensus)
document()
library(consensus)
library(consensus)
library(consensus)
kemeny(por04)
kemeny(por04)
load(url("https://unioviedo-my.sharepoint.com/:u:/g/personal/noeliarico_uniovi_es/EXrlI5zq6ltPoQ7X5yoQdVQB0Plth-SBJyf6aSHwkhpARA?e=5UT6hc"))
load(url("https://unioviedo-my.sharepoint.com/:u:/g/personal/noeliarico_uniovi_es/EXrlI5zq6ltPoQ7X5yoQdVQB0Plth-SBJyf6aSHwkhpARA?e=5UT6hc"))
library(consensus)
kemeny(por04)
library(consensus)
kemeny(por04)
document()
library(consensus)
kemeny(por04)
v <- kemeny(por04)
v$profileOfRankings
v$distances
library(consensus)
kemeny(por04)
p <- random_profile_of_rankings(por06)
p <- random_profile_of_rankings(6, 6)
p
kemeny(p)
library(consensus)
library(consensus)
library(consensus)
v$distances
v$distances %>% rum[order(distance, decreasing = TRUE), ]
v$distances
v$distances[order(distance, decreasing = TRUE), ]
v$distances[order(x$distances$distance, decreasing = TRUE), ]
v$distances[order(v$distances$distance, decreasing = TRUE), ]
v$distances[order(v$distances$distance), ]
library(consensus)
v$distances[order(v$distances$distance), ]
kemeny(p)
library(consensus)
kemeny(p)
library(consensus)
kemeny(p)
kemeny(por04)
library(consensus)
kemeny(por04)
library(consensus)
kemeny(por04)
v$distances
v$profileOfRankings$profileOfRankings
library(consensus)
v$distances
kemeny(por04)
kemeny(p)
library(consensus)
kemeny(p)
use_r("litvak")
document()
library(consensus)
litvak(por04)
litvak(por04)
copeland(por01)
library(consensus)
condorcet(por01)
document()
library(consensus)
document()
condorcet(por01)
library(consensus)
library(consensus)
condorcet(por01)
library(consensus)
condorcet(por01)
condorcet(por02)
condorcet(por03)
condorcet(por04)
condorcet(por05)
condorcet(por04)
condorcet(por01)
kemeny(por01)
tideman(por01)
library(consensus)
tideman(por01)
library(consensus)
tideman(por01)
library(consensus)
tideman(por01)
library(consensus)
library(consensus)
random_profile_of_rankings()
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
random_profile_of_rankings()
random_profile_of_rankings(4, 5, letters[1:4])
random_profile_of_rankings(4, 5, letters[1:5])
random_profile_of_rankings(4, 5, cnames = letters[1:5])
random_profile_of_rankings(4, 5, cnames = letters[1:4])
library(consensus)
document()
use_build_ignore("benchmarking/")
library(consensus)
document()
library(consensus)
borda_count(por04)
por04
library(consensus)
por04
library(consensus)
borda(por01)
borda_count(por01)
borda_count(por01, seeTrace = TRUE)
borda_count(por02, seeTrace = TRUE)
borda_count(por03, seeTrace = TRUE)
borda_count(por04, seeTrace = TRUE)
borda_count(por05, seeTrace = TRUE)
library(consensus)
seq(1, 100, 10)
seq(10, 100, 10)
pors <- vector(type = "list", 10*10)
i <- 1
for(ncandidates in seq(10, 100, 10)) {
for(nrankings in seq(10, 100, 10)) {
pors[[i]] <- random_profile_of_rankings(ncandidates, nrankings)
i <- i + 1
}
}
pors <- vector(type = "list", 10*10)
pors <- vector(type = list, 10*10)
?vector
pors <- vector(mode = "list", 10*10)
pors
i <- 1
for(ncandidates in seq(10, 100, 10)) {
for(nrankings in seq(10, 100, 10)) {
pors[[i]] <- random_profile_of_rankings(ncandidates, nrankings)
i <- i + 1
}
}
pors
reps <- 10
i <- 1
times_plurality <- vector(mode = "list", 10*10)
for(i in 1:length(pors)) {
time <- 0
for(i in 1:reps) {
time <- time + system.time(plurality(pors[[i]]))['elapsed']
}
i <- i + 1
times_plurality[[i]] <- time/reps
}
lapply(1:10, rep_len, 10)
sapply(1:10, rep_len, 10)
unlist(lapply(1:10, rep_len, 10))
library(votesys)
?votesys::borda_method()
raw <- replicate(sample(1:100), 100))
raw <- replicate(sample(1:100), 100)
?replicate
raw <- replicate(100, sample(1:100))
raw
raw <- matrix(raw, ncol = 100, byrow = TRUE)
raw
raw <- replicate(100, sample(1:100))
raw <- matrix(raw, ncol = 100, byrow = TRUE)
vote <- create_vote(raw, xtype = 2)
vote <- create_vote(raw)
vote <- create_vote(raw, xtype = 2, candidate = paste0("C", 1:100))
borda_method(vote)
vote
raw <- replicate(100, sample(paste0("C", 1:100)))
raw <- matrix(raw, ncol = 100, byrow = TRUE)
vote <- create_vote(raw, xtype = 2, candidate = paste0("C", 1:100))
borda_method(vote)
system.time(borda_method(vote))['elapsed']
votesys::cdc_schulze(vote)
system.time(cdc_schulze(vote))['elapsed']
system.time(borda_method(vote))['elapsed']
library(consensus)
library(consensus)
tideman(por01)
tideman(por02)
tideman(por03)
tideman(por04)
tideman(por05)
tideman(por06)
tideman(por0)
tideman(por07)
tideman(por08)
tideman(por09)
tideman(por10)
tideman(por11)
tideman(por12)
tideman(por13)
tideman(por14)
tideman(por15)
library(consensus)
document()
tideman(por15)
library(consensus)
tideman(por15)
set_candidates(por01, paste0("C", 1:4))
por01 <- set_candidates(por01, paste0("C", 1:4))
usethis::use_data(por01, overwrite = TRUE)
set_candidates(por02, paste0("C", 1:4))
por02 <- set_candidates(por02, paste0("C", 1:4))
usethis::use_data(por02, overwrite = TRUE)
por03 <- set_candidates(por03, paste0("C", 1:4))
usethis::use_data(por03, overwrite = TRUE)
por04 <- set_candidates(por04, paste0("C", 1:4))
usethis::use_data(por04, overwrite = TRUE)
por05 <- set_candidates(por05, paste0("C", 1:4))
usethis::use_data(por05, overwrite = TRUE)
por06 <- set_candidates(por06, paste0("C", 1:4))
usethis::use_data(por06, overwrite = TRUE)
por06
usethis::use_data(por07, overwrite = TRUE)
por07 <- set_candidates(por07, paste0("C", 1:4))
usethis::use_data(por07, overwrite = TRUE)
por08 <- set_candidates(por08, paste0("C", 1:4))
usethis::use_data(por08, overwrite = TRUE)
por09
por10
por11
por12
por13
por14
por09 <- set_candidates(por09, paste0("C", 1:4))
por10 <- set_candidates(por10, paste0("C", 1:4))
por11 <- set_candidates(por11, paste0("C", 1:4))
por12 <- set_candidates(por12, paste0("C", 1:4))
por13 <- set_candidates(por13, paste0("C", 1:4))
usethis::use_data(por09, overwrite = TRUE)
usethis::use_data(por10, overwrite = TRUE)
usethis::use_data(por11, overwrite = TRUE)
usethis::use_data(por12, overwrite = TRUE)
usethis::use_data(por13, overwrite = TRUE)
por01
por02
por01
por04
toLatex(por04)
por13 <- parse_profile_of_rankings("5, a ≻ b ≻ c ≻ d,
4, b ≻ c ≻ d ≻ a,
2, c ≻ d ≻ b ≻ a,
1, d ≻ c ≻ b ≻ a")
por13 <- set_candidates(por13, paste0(C, 1:4))
por13 <- set_candidates(por13, paste0("C", 1:4))
por13
usethis::use_data(por13, overwrite = TRUE)
por13
document()
library(consensus)
library(consensus)
library(consensus)
library(usethis)
use_package("xtable")
document()
library(devtools)
document()
library(consensus)
document()
document()
library(consensus)
library(consensus)
document()
document()
document()
document()
library(consensus)
use_package("xtable")
library(consensus)
library(consensus)
document()
document()
document()
use_package("vctrs")
library(consensus)
document()
document()
library(consensus)
document()
document()
library(consensus)
use_package("stringr")
install.packages("stringr")
install.packages("stringr")
use_package("MASS")
library(consensus)
use_build_ignore("traces")
parent.env()
parent.env(.)
?parent.env
baseenv()
environment()
library(consensus)
votrix(por01)
library(consensus)
votrix(por01)
a <- "Hola"
environment(a)
Sys.getenv()
library(pryr)
wjere(a)
where(a)
a
where("Hola")
where("a")
library(consensus)
votrix(por01)
library(consensus)
votrix(por01)
p <- random_profile_of_rankings()
p
votrix(por01)
library(consensus)
p
votrix(p)
library(consensus)
votrix(p)
library(consensus)
votrix(p)
library(consensus)
votrix(p)
p
library(consensus)
votrix(p)
library(consensus)
votrix(p)
library(consensus)
votrix(p)
scorix(p)
pors[[1]] <- random_profile_of_rankings()
pors[[2]] <- random_profile_of_rankings()
pors[[1]] <- random_profile_of_rankings()
pors[[2]] <- random_profile_of_rankings()
pors
random_profile_of_rankings()
pors2[[1]] <- random_profile_of_rankings()
pors2[[2]] <- random_profile_of_rankings()
pors2 <- list()
pors2[[1]] <- random_profile_of_rankings()
pors2[[2]] <- random_profile_of_rankings()
pors2
for(i in 1:2) {
votrix(pors2[[i]])
}
pors2[[1]]
lapply(pors2[[i]], votrix)
lapply(pors2, votrix)
purrr::map(pors2, votrix)
v <- lapply(pors2, votrix)
tools::package_native_routine_registration_skeleton(".")
library(consensus)
use_c("consensus-init.c")
document()
document()
document()
library(consensus)
library(consensus)
library(consensus)
document()
votrix(por01)
library(consensus)
