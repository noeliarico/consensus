five(e6, seePoints = TRUE)
seven(e6, seePoints = TRUE)
e7
plurality(e7, seePoints = TRUE)
two(e7, seePoints = TRUE)
three(e7, seePoints = TRUE)
five(e7, seePoints = TRUE)
seven(e7, seePoints = TRUE)
e8
plurality(e8, seePoints = TRUE)
two(e8, seePoints = TRUE)
three(e8, seePoints = TRUE)
five(e8, seePoints = TRUE)
seven(e8, seePoints = TRUE)
sink()
library(consensus)
manhattan <- "A ~ D ~ E > G > C > B ~ H > F"
euclidean <- "E > C ~ G > A ~ D > B > F ~ H"
chebyshev <- "C ~ E > B > F > G > A ~ D ~ H"
parse_ranking(manhattan)
library(tidyverse)
parse_ranking(manhattan)
as.numeric(parse_ranking(manhattan))
matrix(mamanhattan, euclidean, chebyshev)
matrix(manhattan, euclidean, chebyshev)
cbing(manhattan, euclidean, chebyshev)
cbind(manhattan, euclidean, chebyshev)
rbind(manhattan, euclidean, chebyshev)
rbind(as.numeric(manhattan), euclidean, chebyshev)
manhattan <- parse_ranking("A ~ D ~ E > G > C > B ~ H > F")
euclidean <- parse_ranking("E > C ~ G > A ~ D > B > F ~ H")
chebyshev <- parse_ranking("C ~ E > B > F > G > A ~ D ~ H")
rbind(manhattan, euclidean, chebyshev)
profile_of_rankings(rbind(manhattan, euclidean, chebyshev))
por <- profile_of_rankings(rbind(manhattan, euclidean, chebyshev))
plurality(por)
xtable(plurality(por))
library(xtable)
xtable(plurality(por))
plurality(por)
plurality(por, seePoints = TRUE)
library(consensus)
plurality(por, seePoints = TRUE)
1.83^2
2/3
4/3
5/4
6/4
7/3
7/4
8/3
install.packages("fractional")
library(fractional)
fractional(plurality(por, seePoints = TRUE))
plurality(por, seePoints = TRUE)
c(0.3333333,0.0000000,0.5000000,0.3333333,1.8333333,0.0000000,0.0000000,0.0000000)
fractional(c(0.3333333,0.0000000,0.5000000,0.3333333,1.8333333,0.0000000,0.0000000,0.0000000))
two(por, seePoints = TRUE)
three(por, seePoints = TRUE)
four(por, seePoints = TRUE)
five(por, seePoints = TRUE)
scoring <- function(profileOfRankings, method = NULL, t = 1, verbose = FALSE, seePoints = FALSE) {
if(verbose) {
cat('Executing a scoring ranking rule...\n')
}
attname <- deparse(substitute(profileOfRankings))
# Split votes and rankings
splittedPOF <- split_profile_of_rankings(profileOfRankings)
# Get votes
votes <- splittedPOF$votes
# Get rankings
profileOfRankings <- splittedPOF$rankings
# Get the candidates
candidates <- splittedPOF$candidates
# Result vectors
v <- vector(length = ncol(profileOfRankings))
names(v) <- names(profileOfRankings)
# For each ranking in the profile of rankings
for(i in 1:nrow(profileOfRankings)) {
numVotersRow <- votes[i]
ranking <- profileOfRankings[i,]
p <- calculatePoints(ranking, method, t, verbose, seePoints)
v <- v + (numVotersRow * p)
if(verbose) {
cat("-> The points for this ranking\n")
print(p)
cat("-> This ranking has ",numVotersRow," voters\n")
cat("-> The current value of the total points is:")
print(v)
}
}
if(seePoints) {
print(v)
}
v <- sort(v, decreasing = TRUE) # sort v from more votes to less
if(verbose) {
print(paste('Points rewarded by each candidate of the profile of rankings', "'", attname, "'"))
print(v)
print('Ranking:')
}
# vector that will store the final ranking
ranking <- rep(0, length(candidates))
names(ranking) <- candidates
pos <- 1 # position in the ranking
for(i in 1:(length(v)-1)) {
thisElem <- v[i]
nextElem <- v[i+1]
# ranking
index_of_candidate <- which(candidates == names(v)[i])
ranking[index_of_candidate] <- pos
if(thisElem > nextElem) {
pos <- pos + 1
}
# else, nothing -> this means the two rankings are equals
# so it's not necessary increment the position cause it will be tied
# with the previous element
}
ranking[which(candidates == names(v)[i+1])] <- pos
return(ranking(ranking))
}
scoring(por, t = 2)
scoring(por, t = 2)
library(consensus)
docu
library(devtools)
document()
library(consensus)
document()
scoring(por, t = 2)
scoring(por, method = NULL, t = 2)
scoring(profileOfRankings, "t", t = 2, seePoints = T)
scoring(por, "t", t = 2, seePoints = T)
two(por, seePoints = TRUE)
scoring(por, "t", t = 4, seePoints = T)
scoring(por, "t", t = 2, seePoints = T)
borda_count(por)
scoring(por, "t", t = 6, seePoints = T)
devtools::install_github("hadley/sloop")
library(devtools)
devtools::install_github("hadley/sloop")
devtools::install_github("hadley/emo")
library(bookdown)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR("Andante123")
Andante123
install.packages(as.vector(needed_packages))
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="../../installed_packages.rda")
installedpackages
installed.packages()
tmp
save(tmp, file="../../installed_packages.rda")
rm(list = ls())
load("../../installed_packages.rda")
tmp
find.package("ggplot2")
library(devtools)
document()
library(consensus)
random_profile_of_rankings(10,5)
library(consensus)
random_profile_of_rankings(10,5)
library(consensus)
random_profile_of_rankings(10,5)
toLatex(random_profile_of_rankings(10,5))
toLatex(c(3,2,1))
toLatex(5)
?toLatex
xtable(random_profile_of_rankings(10,5))
library(xtable)
xtable(random_profile_of_rankings(10,5))
xtable(print(random_profile_of_rankings(10,5)))
xtable(print(random_profile_of_rankings(10,5)))
library(tidyverse)
xtable(print(random_profile_of_rankings(10,5)))
str_replace(xtable(print(random_profile_of_rankings(10,5))), ">", "\succ")
str_replace(xtable(print(random_profile_of_rankings(10,5))), ">", "\\succ")
str_replace(xtable(print(random_profile_of_rankings(10,5))), ">", "\\\succ")
str_replace(xtable(print(random_profile_of_rankings(10,5))), ">", "\\\\succ")
?str_replace
str_replace(xtable(print(random_profile_of_rankings(10,5))), ">", "succ")
class(xtable(print(random_profile_of_rankings(10,5))))
?map2
map2(xtable(print(random_profile_of_rankings(10,5))), paste0, "1")
pmap(xtable(print(random_profile_of_rankings(10,5))), paste0, "1")
pmap(xtable(print(random_profile_of_rankings(10,5))), str_replace, ">", "succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace, ">", "succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "succ")
xtable(print(random_profile_of_rankings(10,5)))
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\ \ succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\ \succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\\ succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\succ")
sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ")
xtable(sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ"))
prueba <- xtable(sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\\\ succ"))
prueba <- xtable(sapply(prueba, str_replace_all, "succ", "\\\ succ"))
prueba
prueba <- xtable(sapply(prueba, str_replace_all, "succ", "\\\\ succ"))
prueba
str_replace("hola \adios")
str_replace("hola \adios", "\adios", "noelia")
str_replace("hola \adios", "\adios", "\noelia")
xtable(sapply(xtable(print(random_profile_of_rankings(10,5))), str_replace_all, ">", "\succ"))
str_replace_all("hola \adios", "\adios", "\noelia")
print(random_profile_of_rankings(10,5)))
print(random_profile_of_rankings(10,5)
)
print(random_profile_of_rankings(10,5))
sapply(print(random_profile_of_rankings(10,5)), str_replace_all, pattern = ">", replacement = "noelia")
sapply(print(random_profile_of_rankings(10,5)), str_replace_all, pattern = ">", replacement = "\succ")
str_replace_all,(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "\succ")
str_replace_all(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "\succ")
str_replace(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "\succ")
str_replace_all("hola \adios", "\adios", "\noelia")
str_replace_all("hola \adios", "adios", "\noelia")
str_replace("hola \adios", "adios", "\noelia")
str_replace(print(random_profile_of_rankings(10,5))[1,], pattern = "\>", replacement = "\succ")
str_replace(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "\succ")
str_replace(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "succ")
str_replace_all(print(random_profile_of_rankings(10,5))[1,], pattern = ">", replacement = "succ")
str_replace("5 < 4 < 6", "<", "\succ")
str_replace("5 < 4 < 6", "\<", "\succ")
str_replace("5 < 4 < 6", "<", "\\\\")
str_replace("5 < 4 < 6", "<", "[\\]")
gsub("5 < 4 < 6", "<", "\succ")
gsub("\\", "", str, fixed=TRUE)
gsub("<", "\\", "5 < 4 < 6", fixed=TRUE)
gsub("<", "\", "5 < 4 < 6", fixed=TRUE)
?gsub
grepl("\\over", "5 < 4 < 6", fixed = TRUE)
gsub("<", as.character("\"), "5 < 4 < 6", fixed=TRUE)
gsub("<", as.character("\\"), "5 < 4 < 6", fixed=TRUE)
gsub("<", as.character("\succ"), "5 < 4 < 6", fixed=TRUE)
gsub("<", as.character("\\succ"), "5 < 4 < 6", fixed=TRUE)
gsub("<", "\\succ", "5 < 4 < 6", fixed=TRUE)
xtable(gsub("<", "\\succ", "5 < 4 < 6", fixed=TRUE))
xtable(as.data.frame(gsub("<", "\\succ", "5 < 4 < 6", fixed=TRUE)))
test <- "The temperature is 20 °C"
output <- gsub("\\x{00B0}", "\\\\textdegree", test)
output
xtable(print(random_profile_of_rankings(10,5)))
xtable(print(random_profile_of_rankings(10,5)))
document()
library(consensus)
random_profile_of_rankings(10,5)
toLatex(random_profile_of_rankings(10,5))
toLatex(random_profile_of_rankings(10,5))
library(consensus)
toLatex(random_profile_of_rankings(10,5))
set.seed(123)
random_profile_of_rankings(6, 4)
dput(random_profile_of_rankings(6, 4))
set.seed(123)
por <- random_profile_of_rankings(6, 4)
toLatex(por)
as.numeric(por)
as.data.frame(por)
tibble(A, B, C, D, E, F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
tibble("A", "B", "C", "D", "E", "F",
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
tribble("A", "B", "C", "D", "E", "F",
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
tribble(A, B, C, D, E, F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
profile_of_rankings(as.data.frame(por))
install.packages("kknn")
?kknn
library(kknn)
?kknn
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(as.data.frame(por))
class(profileOfRankings) <- c("por", "data.frame")
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(as.data.frame(por))
profile_of_rankings(por)
library(consensus)
set.seed(123)
por <- random_profile_of_rankings(6, 4)
toLatex(por)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
por
as.matrix(por)
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
profile_of_rankings(por)
borda_count(por, seePoints = T)
por <- profile_of_rankings(por)
borda_count(por, seePoints = T)
borda_count(por, seePoints = T, verbose = T)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
por <- profile_of_rankings(por)
library(consensus)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
library(tidyverse)
por <- tribble(~A, ~B, ~C, ~D, ~E, ~F,
2, 4, 6, 3, 5, 1,
2, 3, 2, 2, 4, 1,
4, 3, 2, 5, 4, 1,
1, 3, 2, 1, 3, 1)
por <- profile_of_rankings(por)
borda_count(por, seePoints = T)
borda_count(por, seePoints = T)
library(consensus)
remove.packages("consensus")
library(devtools)
install_github("noeliarico/consensus")
library(consensus)
library(consensus)
random_profile_of_rankings()
library(tidyverse)
random_profile_of_rankings()
print(random_profile_of_rankings())
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
library(consensus)
random_profile_of_rankings()
library(consensus)
random_por <- random_profile_of_rankings()
random_por
library(consensus)
random_por
print(random_por)
1-75-0.5
1.75-0.5
1.25+1.75
9.25-1.5
library(devtools)
vignette("Create rankings")
devtools::use_vignette("creation")
use_vignette("creation")
library(consensus)
library(consensus)
library(consensus)
inherits(c(4,1,2), "numeric")
library(consensus)
document()
library(consensus)
library(consensus)
library(consensus)
library(consensus)
random_profile_of_rankings(4)
library(tidyverse)
random_profile_of_rankings(4)
library(consensus)
random_profile_of_rankings(4)
random_profile_of_rankings()
noelia <- random_profile_of_rankings()
library(consensus)
noelia <- random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
random_profile_of_rankings()
library(consensus)
library(consensus)
random_profile_of_rankings()
document()
library(consensus)
random_profile_of_rankings()
class(random_profile_of_rankings())
as.data.frame(random_profile_of_rankings())
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
library(consensus)
random_profile_of_rankings()
?rapply
library(consensus)
random_profile_of_rankings()
library(tidyverse)
random_profile_of_rankings()
set.seed(2020)
random_profile_of_rankings()
set.seed(2020)
as-numeric(random_profile_of_rankings())
as.numeric(random_profile_of_rankings())
as.matrix(random_profile_of_rankings())
set.seed(2020)
as.matrix(random_profile_of_rankings())
set.seed(2020)
as.matrix(random_profile_of_rankings())
set.seed(2020)
random_profile_of_rankings()
library(devtools)
random_profile_of_rankings()
document()
library(consensus)
random_profile_of_rankings()
random_profile_of_rankings(seed = 20)
random_profile_of_rankings(seed = 20)
library(consensus)
random_profile_of_rankings(seed = 20)
?outer
+(outer(v1, v1, `==`))
+(outer(c(3,1,2), c(3,2,1) `<=`))
v1 <- c(2, 2, 3, 2, 3, 4, 4)
+(outer(v1, v1, `==`))
+(outer(v1, v1, `>=`))
(outer(v1, v1, `>=`))
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
library(consensus)
m
