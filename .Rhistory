)
rankingc(3, 2, 1)
ranking(c(3, 2, 1))
kendall(ranking(c(1, 3, 2)), ranking(c(3, 2, 1)))
ls(hashKemeny3)
kendall(ranking(c(1, 3, 2)), ranking(c(2, 3, 1)))
ranking(c(2, 3, 1)
)
kendall(ranking(c(1, 3, 2)), ranking(c(2, 3, 1)))
hashKemeny3 <- new.env()
perm <- read.csv("perm3.csv")
perm <- as.por(perm)
sink("test3")
unlist(lapply(1:nrow(perm), function(x){
lapply(1:nrow(perm), function(y) {
r1 <- get_ranking(perm, x)
r2 <- get_ranking(perm, y)
print("From:")
print(r1)
print("To:")
print(r2)
name <- getHash(r1, r2)
dist <- kendall(r1, r2)
print("Distance:")
print(dist)
hashKemeny3[[name]] <- dist
})
}))
sink()
hashKemeny6 <- new.env()
perm <- read.csv("perm6.csv")
perm <- as.por(perm)
unlist(lapply(1:nrow(perm), function(x){
lapply(1:nrow(perm), function(y) {
r1 <- get_ranking(perm, x)
r2 <- get_ranking(perm, y)
print(r1)
print(r2)
name <- getHash(r1, r2)
dist <- kendall(r1, r2)
print(dist)
hashKemeny6[[name]] <- dist
})
}))
sink()
sink("test6")
hashKemeny6 <- new.env()
perm <- read.csv("perm6.csv")
perm <- as.por(perm)
unlist(lapply(1:nrow(perm), function(x){
lapply(1:nrow(perm), function(y) {
r1 <- get_ranking(perm, x)
r2 <- get_ranking(perm, y)
print(r1)
print(r2)
name <- getHash(r1, r2)
dist <- kendall(r1, r2)
print(dist)
hashKemeny6[[name]] <- dist
})
}))
sink()
mget("123", evir = hashKemeny3)
mget("123")
ls(pattern = "^123"))
ls(pattern = "^123")
ls(pattern = "^123", envir = hashKemeny3)
ls(envir = hashKemeny3)
ls(envir = hashKemeny3, pattern = "132.*")
hashKemeny3[[c("132132" "132213" "132231" "132312")]]
hashKemeny3[[c("132132","132213","132231","132312")]]
hashKemeny3[c("132132","132213","132231","132312")]
get(c("132132","132213","132231","132312"), hashKemeny3)
get(c("132132"), hashKemeny3)
get(c("132w32"), hashKemeny3)
get(c("132132"), hashKemeny3)
get(c("132232"), hashKemeny3)
get(c("132212"), hashKemeny3)
get(c("132212"), hashKemeny3)
get(c("132213"), hashKemeny3)
#' @param verbose
#'
#' @return kemeny returns an object of class kemeny
#' @export
#'
#' @examples
#' por <- parse_profile_of_rankings("6, a ≻ b ≻ c ≻ d,
#'                                   5, b ≻ c ≻ a ≻ d,
#'                                   3, c ≻ d ≻ a ≻ b")
#' kemeny(por)
kemeny <- function(profileOfRankings, details = TRUE, verbose = FALSE) {
lapply(1:nrow(profileOfRankings), function (x) {
name <- getHash(get_ranking(profileOfRankings,x))
print(name)
reg <- paste0(name, ".*")
print(reg)
objs <- ls(envir = hashKemeny3, pattern = reg)
lapply(objs, function(y, sum) {
sum <- sum + hashKemeny3[[y]]
}, sum = 0)
})
# # Split votes and rankings
# splittedPOF <- split_profile_of_rankings(profileOfRankings)
# # Get votes
# votes <- splittedPOF$votes
# # Get rankings
# rankings <- splittedPOF$rankings
# # Get candidates
# candidates <- names(rankings)
#
# rev <- reversals(candidates)
#
# if(details) {
#   distances <- t(sapply(1:nrow(rev), function(i) {
#     sapply(1:nrow(profileOfRankings), function(j) {
#       kendall(get_ranking(profileOfRankings, j), ranking(rev[i,]))
#     })
#   }))
#   colnames(distances) <- paste0("r", 1:ncol(distances))
#   distance <- t(apply(distances, 1, function(x) x * votes))
#   distance <- rowSums(distance)
#   out <- cbind(rev, distances, distance)
# }
# else {
#   ncores < detectCores()
#   cl <- makeCluster(ncores)
#   distances <- parSapply(cl, 1:nrow(rev), function(i) {
#     sapply(1:nrow(profileOfRankings), function(j) {
#       kendall(get_ranking(profileOfRankings, j), ranking(rev[i,]))
#     })
#   })
#   stopCluster(cl)
#   distance <- t(apply(distances, 1, function(x) x * votes))
#   distance <- rowSums(distance)
#   out <- cbind(rev, distance)
# }
return(out)
}
rm(kemeny)
save(hashKemeny3, "hashKemeny3.RData")
save(hashKemeny3, file = "hashKemeny3.RData")
hashKemeny6 <- new.env()
perm <- read.csv("perm6.csv")
perm <- as.por(perm)
unlist(lapply(1:nrow(perm), function(x){
lapply(1:nrow(perm), function(y) {
r1 <- get_ranking(perm, x)
r2 <- get_ranking(perm, y)
#print(r1)
#print(r2)
name <- getHash(r1, r2)
dist <- kendall(r1, r2)
#print(dist)
hashKemeny6[[name]] <- dist
})
}))
save(hashKemeny6, "hashKemeny6.RData")
save(hashKemeny6, "hashKemeny6.RData")
save(hashKemeny6, file = "hashKemeny6.RData")
por <- random_profile_of_rankings(3)
por
por <- random_profile_of_rankings(3, 3)
por
kemeny(por)
rm(hashKemeny6)
rm(perm)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
#     r2 <- get_ranking(perm, y)
#     #print(r1)
#     #print(r2)
#     name <- getHash(r1, r2)
#     dist <- kendall(r1, r2)
#     #print(dist)
#     hashKemeny6[[name]] <- dist
#   })
# }))
#
getHash <- function(r1, r2 = NULL) {
if(is.null(r2)) {
paste0(paste(as.numeric(r1), collapse = ""))
}
else {
paste0(paste(as.numeric(r1), collapse = ""),
paste(as.numeric(r2), collapse = ""))
}
}
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
sum <- sum + (hashKemeny3[[y]] * votes])
library(consensus)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
document()
library(tidytools)
library(devtools)
document()
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
factorial(3)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
library(consensus)
kemeny(por)
library(consensus)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
kemeny(por)
library(consensus)
library(consensus)
kemeny(por)
perm6 <- read.csv("perm6.csv")
library(devtools)
use_data(perm6)
rm(list = ls())
library(consensus)
perm
perm6
library(consensus)
perm6
colnames(perm6) <- paste0("N", 1:6)
perm6
as.por(perm6)
library(tidyverse)
as.por(perm6)
library(consensus)
library(consensus)
prueba <- list(structure(c(7.69196128845215, 7.34419822692871, 5.82047653198242,
6.71214056015015, 5.42766427993774, 6.67938184738159, 6.23659133911133,
4.75439643859863, 5.61439228057861, 4.05519247055054, 5.7403130531311,
5.32151699066162, 4.29393434524536, 4.7618727684021, 3.49287962913513,
7.79849290847778, 7.50335025787354, 6.3366322517395, 6.97958421707153,
6.24294948577881, 7.25325918197632, 6.8666558265686, 5.53156423568726,
6.10506772994995, 4.78620958328247, 7.42642116546631, 7.02761363983154,
5.66007947921753, 6.40746974945068, 5.01752042770386), .Dim = 5:6, .Dimnames = list(
c("V1", "V2", "V3", "V4", "V5"), NULL)), structure(c(7.26677560806274,
5.52719116210938, 8.20956134796143, 8.22606563568115, 6.32676076889038,
7.06158351898193, 5.146071434021, 7.39771604537964, 7.52136945724487,
6.02327919006348, 6.67370271682739, 5.32454013824463, 6.64398336410522,
6.85073947906494, 5.94107103347778, 8.15647411346436, 6.06435918807983,
8.87801837921143, 8.85263633728027, 7.25129127502441, 7.31492900848389,
5.16473150253296, 8.13933849334717, 8.17312145233154, 6.20673751831055,
7.24638891220093, 5.20998048782349, 7.96305179595947, 8.01587104797363,
6.1838059425354), .Dim = 5:6, .Dimnames = list(c("V1", "V2",
"V3", "V4", "V5"), NULL)))
prueba
kemeny(prueba)
library(consensus)
kemeny(prueba)
pruebapor <- lapply(prueba, as.por)
library(tidyverse)
pruebapor <- lapply(prueba, as.por)
pruebapor
kemeny(pruebapor)
lapply(preubapor, kemeny)
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
1:1
library(consensus)
lapply(pruebapor, kemeny)
get_ranking(pruebapor[[1]], 1)
library(consensus)
get_ranking(pruebapor[[1]], 1)
lapply(pruebapor, kemeny)
library(consensus)
perm3 <- read.csv("perm3.csv")
perm3
librry(devtools)
library(devtools)
use_data(perm3)
library(consensus)
por <- random_profile_of_rankings(3, 3)
por
kemeny(por)
por <- random_profile_of_rankings(3, 1)
por
kemeny(por)
library(consensus)
library(consensus)
por <- random_profile_of_rankings(3, 3)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
por <- random_profile_of_rankings(3, 1)
kemeny(por)
perm3
perm3 <- read.csv(perm3, header = FALSE)
perm3 <- read.csv("perm3.csv", header = FALSE)
perm3
use_data(perm3)
use_data(perm3, overwrite = TRUE)
por
por <- random_profile_of_rankings(3, 3)
por
kemeny(por)
por <- random_profile_of_rankings(3, 1)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
lapply(pruebapor, kemeny)
library(consensus)
noelia <- data("perm3")
noelia
noelia <- load("perm3")
noelia <- data(list = "perm3")
noelia
perm3
?data
name <- "perm3"
noelia <- data(list = name)
noelia
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
library(consensus)
lapply(pruebapor, kemeny)
por3 <- parse_profile_of_rankings("1, a ≻ b ≻ c
1, b ≻ c ≻ a")
por
por <- parse_profile_of_rankings("1, a ≻ b ≻ c,
1, b ≻ c ≻ a")
por
library(consensus)
kemeny(por)
library(consensus)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
kemeny(por)
library(consensus)
library(consensus)
rm(list=ls())
library(consensus)
library(RankAggreg)
?RankAggreg::RankAggreg()
install.packages("votesys")
librry(votesys)
library(votesys)
?borda_method
raw <- c(
rep(c('m', 'n', 'c', 'k'), 42),
rep(c('n', 'c', 'k', 'm'), 26),
rep(c('c', 'k', 'n', 'm'), 15),
rep(c('k', 'c', 'n', 'm'), 17)
)
raw <- matrix(raw, ncol = 4, byrow = TRUE)
vote <- create_vote(raw, xtype = 2, candidate = c('m', 'n', 'c', 'k'))
y <- borda_method(vote)
y
library(devtools)
library(consensus)
ranking(c(4, 2, 1))
as.numeric(ranking(c(4, 2, 1)))
use_vignette("V04-RankingRules")
?ranking
librry(devtools)
library(devtools)
use_data_raw("table2.1")
library(consensus)
?use_data_raw
library(consensus)
use_data_raw("table2.2")
document()
?use_data_raw
document()
library(consensus)
?use_data
library(consensus)
library(consensus)
source('~/Desktop/Github/consensus/data-raw/table2-1.R')
source('~/Desktop/Github/consensus/data-raw/table2-1.R')
source('~/Desktop/Github/consensus/data-raw/table2-1.R')
use_data_raw("por1")
source('~/Desktop/Github/consensus/data-raw/por1.R')
library(consensus)
library(consensus)
por1 <- parse_ranking("6, c > b > a > d,
5, a > d > b > c,
3, b > a > d > c")
usethis::use_data("por1", internal = TRUE)
por1 <- parse_ranking("6, c > b > a > d,
5, a > d > b > c,
3, b > a > d > c")
usethis::use_data(por1, internal = TRUE)
use_data("por1", internal = TRUE)
?use_data
library(consensus)
library(usethis)
por1 <- parse_ranking("6, c > b > a > d,
5, a > d > b > c,
3, b > a > d > c")
use_data(por1)
use_data_raw(por2)
use_data_raw("por2")
por <- parse_ranking("6, c > b > a > d,
5, a > d > b > c,
3, b > a > d > c")
por
por <- parse_profile_of_rankings("6, c > b > a > d,
5, a > d > b > c,
3, b > a > d > c")
por
borda_count(por)
library(devtools)
library(rticles)
install.packages("rticles")
library(rticles)
jss_article()
install.packages("tinytex")
library(tinytex)
tlmgr_install()
tlmgr_install("ae.sty")
tlmgr_path()
tlmgr()
tlmgr_update()
tlmgr_update()
sh update-tlmgr-latest.sh -- --upgrade
install.packages("gtools")
library(consensus)
